pipeline {
    agent any
    environment {
        FRONTEND_IMAGE = "mern-frontend:jenkins"
        BACKEND_IMAGE = "mern-backend:jenkins"
        PORT = "5000"
        MONGODB_URI = "mongodb://mongo:27017/cruddb"
        API_URL = "http://localhost:5000/api"
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/Ayush701-code-zm/devops.git'
            }
        }

        stage('Verify Docker') {
            steps {
                sh '''
                echo "Verifying Docker installation and permissions..."
                if ! command -v docker >/dev/null 2>&1; then
                  echo "Docker is not installed or not on PATH." >&2
                  exit 127
                fi
                docker version >/dev/null 2>&1 || { echo "Unable to talk to Docker daemon." >&2; exit 127; }
                # Check access to Docker socket
                if ! docker ps >/dev/null 2>&1; then
                  echo "Docker is installed but Jenkins doesn't have permission to access it." >&2
                  echo "Hint: add 'jenkins' user to 'docker' group and restart Jenkins, or mount /var/run/docker.sock." >&2
                  ls -l /var/run/docker.sock || true
                  id || true
                  exit 127
                fi
                echo "Detecting docker compose command..."
                if command -v docker-compose >/dev/null 2>&1; then
                  echo "docker-compose found"
                else
                  docker compose version >/dev/null 2>&1 || {
                    echo "Neither docker compose plugin nor docker-compose binary found." >&2
                    exit 127
                  }
                fi
                '''
                script {
                    def composeCmd = sh(script: 'if command -v docker-compose >/dev/null 2>&1; then echo docker-compose; else echo "docker compose"; fi', returnStdout: true).trim()
                    env.COMPOSE_CMD = composeCmd
                }
            }
        }

        stage('Prepare .env') {
            steps {
                sh 'mkdir -p server client'
                writeFile file: 'server/.env', text: """port=${PORT}
MONGO_URI=${MONGODB_URI}
"""
                writeFile file: 'client/.env', text: """VITE_API_URL=${API_URL}
"""
                sh 'echo "server/.env:" && cat server/.env && echo "client/.env:" && cat client/.env'
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                echo "Building backend image..."
                docker build -t ${BACKEND_IMAGE} ./server

                echo "Building frontend image..."
                docker build -t ${FRONTEND_IMAGE} ./client --build-arg VITE_API_URL=${API_URL}
                '''
            }
        }

        stage('Run with Docker Compose') {
            steps {
                sh '''
                echo "Starting docker compose..."
                ${COMPOSE_CMD} -f docker-compose.yml up -d --build
                echo "Showing the running containers..."
                ${COMPOSE_CMD} ps
                '''
            }
        }
    }
}
